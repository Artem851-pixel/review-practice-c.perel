Тема: Цели, задачи и методы исследования программного кода
Цель: Глубже осмыслить аспекты, связанные с целями, задачами и методами программного кода

Практическая часть

1) поиск ошибок и уязвимостей, проверка соответствия стандартам кодирования и улучшение читаемости кода
2) это важно, так как позволяет находить проблемы на ранних этапах, снизить стоимость исправления ошибок и улучшить качество конечного продукта
3) можно достичь более стабильную работу программы, улучшить безопасность и снижение будущих ошибок
4) исследование помогает улучшить качество путём: выявления скрытых дефектов, оптимизации алгоритмов и унификации стиля кодирования 
5) они включают создание легко поддерживаемой кодовой базы, построение предсказуемого процесса разработки и формированию культуры качества в команде
Задачи исследования программного кода
6) он решает проверку синтаксических ошибок, анализ соответствия стандартам, обнаружение дублирования кода и оценку сложности кода
7) данный анализ занимается тестированием реального выполнения программы, проверкой использования памяти и анализом производительности
8)Редакторинг:
    • улучшает структуру кода без изменения функционала
    • делает код чище и понятнее
    • фокусируется на внутреннем качестве
Тестирование:
    • Проверяет корректность работы
    • подтверждает соответствие требованиям
    • фокусируется на внешнем поведении
9) очень важно описывать назначение модулей и функций, указывать входные/выходные параметры и фиксировать известные ограничения
10) он включает профилирование, анализ использования памяти, выявление «узких мест», тестирование под нагрузкой и сравнение разных реализаций

Методы исследования программного кода

11) основные методы:
    • лексический анализ
    • синтаксический анализ
    • анализ потока данных
    • метрический анализ
    • анализ зависимостей
12) тестирование позволяет проверять корректность работы, находить ошибки в логике, обеспечивать регрессионную проверку и документировать ожидаемое поведение
13) профайлеры (YourKit), отладчики (GDB), инструменты тестирования (Junit), средства мониторинга (Jmeter), анализ покрытия (JaCoCo)
14) Метод код-ревью включает в себя коллективное изучение кода разработчиков для выявления ошибок, улучшения качества кода и обмена знаниями.
15) Автоматизированные инструменты анализа кода — это программы, которые помогают автоматически оценивать код на основе заранее заданных критериев, таких как стиль, количество ошибок и сложность. Преимущества их использования: 
    • Снижение времени на анализ. 
    • Объективность результатов. 
    • Возможность проверки больших объемов кода.

Проблемы и вызовы

16) Сложность кода и его архитектуры, нехватка документации, устаревшие технологии и подходы
17) Регулярное рефакторинг, использование хороших практик программирования.
18) Неправильном понимании метрик, ложноположительных или ложноотрицательных результатах, нехватке контекста о проекте.
19) Для обеспечения безопасности во время исследований стоит: 
    • Применять тестирование на локальных средах. 
    • Избегать работы с конфиденциальными данными. 
    • Использовать системы контроля версий для отслеживания изменений.
20) он важен для определения производительности и качества кода, выявления проблемных зон и узких мест и формирования стратегии по улучшению разработки.

Практические аспекты исследования

21) стратегия может включать определение целей исследования, выбор подходящих инструментов и планирование временных рамок и ресурсов.
22) Наиболее полезные метрики имеют число строк кода, уровень покрытия кода тестами и количество ошибок на тысячу строк кода.
23) В Agile важно проводить анализ кода итеративно, сочетая его с регулярными спринт-ревью и ретро-перспективами. 
24) Учет UX может включать взаимодействие с дизайнерами и пользователями в процессе разработки и анализа кода.
25) Для эффективного исследования программного кода необходимы знания языков программирования, опыт работы с инструментами анализа и способность понимать организационные процессы разработки.

Примеры и кейсы

26) Примеры могут включать внедрение CI/CD, что значительно упростило работу с кодом и повысило его качество. 
27) Анализ кода может привести к повышению качества, уменьшению времени на тестирование и упрощению дальнейших изменений. 
28) Метод анализа стоит применять, если наследуемое ПО требует модернизации или связано с высокими рисками использования.
29) современные технологии, могут улучшить анализ, позволяя предсказывать потенциальные проблемы и улучшая автоматизацию. 
30) современные тенденции включают увеличение роли автоматизации, применение методов машинного обучения и увеличение внимания к безопасности и качеству кода.
