Тема: Применение отладчиков и дизассемблера
Формат: Индивидуальный проект
Цель: Освоить базовые навыки работы с отладчиком  и дизассемблером для различных целей
Инструменты: VS Code (с расширением Python/PyCharm) / Visual Studio (для C++), встроенный отладчик, Ghidra.
________________________________________
Основные понятия:
1.	Отладчик — это инструмент для поиска и исправления ошибок в программах. Он позволяет выполнять код пошагово, просматривать значения переменных, устанавливать точки останова и анализировать поток выполнения программы.
2.	Отладчик используется для динамического анализа программы во время её выполнения. Дизассемблер преобразует машинный код в ассемблерный для статического анализа
3.	Логические ошибки, Ошибки сегментации, Некорректные значения переменных, Ошибки в условиях и циклах.
4.	Точка останова — это метка в коде, при достижении которой программа приостанавливает выполнение, позволяя анализировать состояние переменных и ход выполнения.

Работа с отладчиком:
5.	Откройте проект, Нажмите F5
6.	Step Into (F11) — заходит в функцию. Step Over (F10) — выполняет текущую строку без входа в функцию. Continue (F5) — продолжает выполнение до следующей точки останова.
7.	В окне Locals
8.	Watch-окно позволяет отслеживать значения конкретных переменных или выражений. Добавьте переменную в Watch, чтобы наблюдать за её изменением во время выполнения
9.	Установите точки останова в ключевых местах. Используйте Step Over для пошагового выполнения. Проверьте значения переменных перед падением.

Дизассемблирование и анализ кода:
10.	Дизассемблер преобразует машинный код в ассемблерный, что позволяет анализировать логику программы без исходного кода и находить уязвимости.
11.	Ghidra, IDA Pro, radare2
12.	В Ghidra: используйте поиск по символам (main или _main).
13.	Поиск строк, связанных с паролем, анализ условных переходов после ввода данных.
14.	В Ghidra: раздел Imports.

Практическое применение:
15.	Установите точку останова перед операцией деления. Проверьте значение делителя. Если делитель равен нулю, добавьте проверку в код.

Обратная разработка:
16.	Используйте дизассемблер для анализа ассемблерного кода. Ищите ключевые функции. Восстанавливайте логику по условным переходам и циклам
17.	Ищите функции с большим количеством условных переходов
18.	Поиск констант, характерных для алгоритмов и анализ функций, работающих с большими блоками данных.
19.	Исследуйте вызовы системных функций и проанализируйте сетевую активность (вызовы socket, connect).
